{"version":3,"sources":["hooks/useFarmsWithBalance.ts","views/Home/components/CardValue.tsx","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","hooks/useTokenBalance.ts","hooks/useAllEarnings.ts","views/Home/components/FarmStakingCard.tsx","views/Home/components/CakeStats.tsx","views/Home/components/TotalValueLockedCard.tsx","views/Home/components/TwitterCard.tsx","views/Home/CountDown.tsx","views/Home/Home.tsx","utils/erc20.ts"],"names":["useFarmsWithBalance","useState","farmsWithBalances","setFarmsWithBalances","account","useWallet","fastRefresh","useRefresh","useEffect","a","calls","farmsConfig","map","farm","address","getMasterChefAddress","name","params","pid","multicall","masterChefABI","rawResults","results","index","balance","BigNumber","fetchBalances","CardValue","value","decimals","fontSize","prefix","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","current","bold","CakeHarvestBalance","earningsSum","TranslateString","useI18n","color","style","lineHeight","CakeWalletBalance","cakeBalance","useTokenBalance","tokenAddress","setBalance","ethereum","getTokenBalance","res","fetchBalance","useAllEarnings","balances","fetchAllBalances","StyledFarmStakingCard","styled","Card","Block","Button","div","CardImage","img","Label","theme","Actions","token","getCakeAddress","FarmedStakingCard","pendingTx","setPendingTx","farmsWithBalance","getBalanceNumber","eggPrice","usePriceCakeBusd","toNumber","reduce","accum","earning","pow","balancesWithValue","filter","balanceType","onReward","useAllHarvest","farmWithBalance","harvestAllFarms","useCallback","addWatchJaguarToken","provider","window","request","method","type","options","symbol","image","size","mb","src","alt","width","height","id","disabled","length","onClick","UnlockButton","toFixed","marginBottom","marginLeft","StyledCakeStats","Row","CakeStats","totalSupply","slowRefresh","setTotalSupply","cakeContract","getContract","cakeABI","methods","call","supply","fetchTotalSupply","useTotalSupply","burnedBalance","balanceOf","bal","useBurnedBalance","farms","useFarms","platinPrice","circSupply","minus","cakeSupply","marketCap","times","fKuzoPerBlock","href","StyledTotalValueLockedCard","TotalValueLockedCard","totalValue","useTotalValue","StyledTwitterCard","TwitterCard","useTheme","isDark","toggleTheme","dataSource","sourceType","screenName","chrome","ClockDiv","ClockTimeSide","ClockTimeSideSpan","span","ClockTimeSideLabel","getTimeRemaining","endtime","total","Date","parse","toString","seconds","Math","floor","minutes","hours","days","CountDown","deadline","timeRemaining","setTimeRemaining","show","setShow","interval","setInterval","temp","clearInterval","as","alignContent","textAlign","className","Hero","mediaQueries","lg","SecondRow","sm","Cards","BaseLayout","PageContainer","Page","Home","FarmStakingCard","Web3","eth","Contract","erc20","userAddress","contract"],"mappings":"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","file":"static/js/17.316499b4.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport { FarmConfig } from 'config/constants/types'\nimport useRefresh from './useRefresh'\n\nexport interface FarmWithBalance extends FarmConfig {\n  balance: BigNumber\n}\n\nconst useFarmsWithBalance = () => {\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\n  const { account } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingKuzo',\n        params: [farm.pid, account],\n      }))\n\n      const rawResults = await multicall(masterChefABI, calls)\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\n\n      setFarmsWithBalances(results)\n    }\n\n    if (account) {\n      fetchBalances()\n    }\n  }, [account, fastRefresh])\n\n  return farmsWithBalances\n}\n\nexport default useFarmsWithBalance\n","import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport { Text } from '@pancakeswap-libs/uikit'\n\ninterface CardValueProps {\n  value: number\n  decimals?: number\n  fontSize?: string\n  prefix?: string\n}\n\nconst CardValue: React.FC<CardValueProps> = ({ value, decimals, fontSize = '40px', prefix }) => {\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: value,\n    duration: 1,\n    separator: ',',\n    decimals:\n      // eslint-disable-next-line no-nested-ternary\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\n  })\n\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(value)\n  }, [value, updateValue])\n\n  return (\n    <Text bold fontSize={fontSize}>\n      {prefix}{countUp}\n    </Text>\n  )\n}\n\nexport default CardValue\n","import React from 'react'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport useI18n from 'hooks/useI18n'\nimport useAllEarnings from 'hooks/useAllEarnings'\nimport CardValue from './CardValue'\n\nconst CakeHarvestBalance = ({earningsSum}) => {\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '60px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return <CardValue value={earningsSum} />\n}\n\nexport default CakeHarvestBalance\n","import React from 'react'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport CardValue from './CardValue'\n\nconst CakeWalletBalance = ({ cakeBalance }) => {\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '36px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return <CardValue value={cakeBalance} fontSize=\"24px\" />\n}\n\nexport default CakeWalletBalance\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport cakeABI from 'config/abi/cake.json'\nimport { getContract } from 'utils/web3'\nimport { getTokenBalance } from 'utils/erc20'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport useRefresh from './useRefresh'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\n      setBalance(new BigNumber(res))\n    }\n\n    if (account && ethereum) {\n      fetchBalance()\n    }\n  }, [account, ethereum, tokenAddress, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(bal))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport default useTokenBalance\n","import { useEffect, useState } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport useRefresh from './useRefresh'\n\nconst useAllEarnings = () => {\n  const [balances, setBalance] = useState([])\n  const { account }: { account: string } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchAllBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingKuzo',\n        params: [farm.pid, account],\n      }))\n\n      const res = await multicall(masterChefABI, calls)\n\n      setBalance(res)\n    }\n\n    if (account) {\n      fetchAllBalances()\n    }\n  }, [account, fastRefresh])\n\n  return balances\n}\n\nexport default useAllEarnings\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Button } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport useI18n from 'hooks/useI18n'\nimport { useAllHarvest } from 'hooks/useHarvest'\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\nimport UnlockButton from 'components/UnlockButton'\nimport { useFarmFromPid, useFarmFromSymbol, useFarmUser } from 'state/hooks'\nimport CakeHarvestBalance from './CakeHarvestBalance'\nimport CakeWalletBalance from './CakeWalletBalance'\nimport { usePriceCakeBusd } from '../../../state/hooks'\nimport useTokenBalance from '../../../hooks/useTokenBalance'\nimport { getCakeAddress } from '../../../utils/addressHelpers'\nimport useAllEarnings from '../../../hooks/useAllEarnings'\nimport { getBalanceNumber } from '../../../utils/formatBalance'\n\n\nconst StyledFarmStakingCard = styled(Card)`\nposition: relative;\noverflow: hidden;\nz-index: 2;\n\n&:before {\n  content: ' ';\n    display: block;\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    z-index: -1;\n    opacity: 0.9;\n  background-repeat: no-repeat;\n  background-position: top right;\n  background-color: #3E0880;\n  min-height: 376px;\n  }\n`\n\nconst DepA = styled.a`\n  display: inline-block !important;\n  width: 408px;\n  margin-left: auto;\n  margin-right: auto;\n  background-color: #490584;\n`\nconst DepButton = styled(Button)`\n  background-color: #FFFFFF;\n\tcolor: #7A3AC8;\n\tfont-size: 22px;\n  &:hover {\n\tbackground-color: #490584;\n\tcolor: #FFFFFF;\n  }\n`\n\nconst Block = styled.div`\n  margin-bottom: 16px;\n`\n\nconst CardImage = styled.img`\n  margin-bottom: 16px;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => \"#E9EAEB\"};\n  font-size: 14px;\n`\n\nconst Actions = styled.div`\n  margin-top: 24px;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-end;\n`\n\nconst token = getCakeAddress();\n\nconst FarmedStakingCard = () => {\n  const [pendingTx, setPendingTx] = useState(false)\n  const { account } = useWallet()\n  const TranslateString = useI18n()\n  const farmsWithBalance = useFarmsWithBalance()\n  const cakeBalance = getBalanceNumber(useTokenBalance(getCakeAddress()))\n  const eggPrice = usePriceCakeBusd().toNumber()\n  const allEarnings = useAllEarnings()\n  const earningsSum = allEarnings.reduce((accum, earning) => {\n    return accum + new BigNumber(earning).div(new BigNumber(10).pow(18)).toNumber()\n  }, 0)\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\n  \n   \n\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\n\n  const harvestAllFarms = useCallback(async () => {\n    setPendingTx(true)\n    try {\n      await onReward()\n    } catch (error) {\n      // TODO: find a way to handle when the user rejects transaction or it fails\n    } finally {\n      setPendingTx(false)\n    }\n  }, [onReward])\n\n  const addWatchJaguarToken = useCallback(async () => {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    const provider = window.ethereum\n    if (provider) {\n      try {\n        // wasAdded is a boolean. Like any RPC method, an error may be thrown.\n        const wasAdded = await provider.request({\n          method: 'wallet_watchAsset',\n          params: {\n            type: 'ERC20',\n            options: {\n              address: token,\n              symbol: 'KUZO',\n              decimals: '18',\n              image: 'https://res.cloudinary.com/crunchbase-production/image/upload/c_lpad,h_170,w_170,f_auto,b_white,q_auto:eco,dpr_1/a9q9vb3gzdnibfegyyma',\n            },\n          },\n        })\n\n        if (wasAdded) {\n          // console.log('Token was added')\n        }\n      } catch (error) {\n        // TODO: find a way to handle when the user rejects transaction or it fails\n      }\n    }\n  }, [])\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\" color=\"#FFFFFF\">\n          {TranslateString(542, 'Farms & Staking')}\n        </Heading>\n        <CardImage src=\"/images/egg/2.png\" alt=\"cake logo\" width={64} height={64} />\n\t\t<Actions>\n          {account ? (\n            <Button\n              id=\"harvest-all\"\n              disabled={balancesWithValue.length <= 0 || pendingTx}\n              onClick={harvestAllFarms}\n            >\n              {pendingTx\n                ? TranslateString(548, 'Collecting EAGLE')\n                : TranslateString(999, `Harvest all (${balancesWithValue.length})`)}\n            </Button>\n          ) : (\n            <UnlockButton  />\n          )}\n        </Actions>\n        <Block>\n          <Label color=\"white\">KUZO to Harvest</Label>\n          <CakeHarvestBalance earningsSum={earningsSum}/>\n          <Label color=\"white\">~${(eggPrice * earningsSum).toFixed(2)}</Label>\n        </Block>\n        <Block>\n          <Label>KUZO in Wallet</Label>\n          <CakeWalletBalance cakeBalance={cakeBalance} />\n          <Label>~${(eggPrice * cakeBalance).toFixed(2)}</Label>\n        </Block>\n        <Actions>\n\t\t<Button onClick={addWatchJaguarToken} size=\"sm\" style={{ marginBottom: 0 }} mb={2}>\n            + Add KUZO to <img style={{ marginLeft: 8 }} width={16} src=\"https://kuzo.xyz/images/metamask.png\" alt=\"metamask logo\" />\n          </Button>\n          {/* {account ? (\n            <Button\n              id=\"harvest-all\"\n              disabled={balancesWithValue.length <= 0 || pendingTx}\n              onClick={harvestAllFarms}\n              fullWidth\n            >\n              {pendingTx\n                ? TranslateString(548, 'Collecting KUZO')\n                : TranslateString(999, `Harvest all (${balancesWithValue.length})`)}\n            </Button>\n          ) : (\n            <UnlockButton fullWidth />\n          )} */}\n        </Actions>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default FarmedStakingCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\nimport { useFarms, usePriceCakeBusd } from '../../../state/hooks'\n\nconst StyledCakeStats = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n  font-color: white;\n  background-color: #3E0880;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  font-color: white;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst CakeStats = () => {\n  const TranslateString = useI18n()\n  const totalSupply = useTotalSupply()\n  const burnedBalance = useBurnedBalance(getCakeAddress())\n  const farms = useFarms();\n  const platinPrice = usePriceCakeBusd();\n  const circSupply = totalSupply ? totalSupply.minus(burnedBalance) : new BigNumber(0);\n  const cakeSupply = getBalanceNumber(circSupply);\n  const marketCap = platinPrice.times(circSupply);\n\n  let fKuzoPerBlock = 0;\n  if(farms && farms[0] && farms[0].fKuzoPerBlock){\n    fKuzoPerBlock = new BigNumber(farms[0].fKuzoPerBlock).div(new BigNumber(10).pow(18)).toNumber();\n  }\n\n  return (\n    <StyledCakeStats>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\" color=\"white\">\n          KUZO Stats\n        </Heading>\n        <Row>\n          <Text fontSize=\"14px\" color=\"white\">Market Cap</Text>\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(marketCap)} decimals={0} prefix=\"$ \" />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\" color=\"white\">Total Minted</Text>\n          {totalSupply && <CardValue fontSize=\"14px\" value={getBalanceNumber(totalSupply)} decimals={0} />}\n        </Row>\n\t\t<Row>\n          <Text fontSize=\"14px\" color=\"white\">Total Burned</Text>\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(burnedBalance)} decimals={0} />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\" color=\"white\">Circulating Supply</Text>\n          {cakeSupply && <CardValue fontSize=\"14px\" value={cakeSupply} decimals={0} />}\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\" color=\"white\">Maximum Supply</Text>\n          10,000\n        </Row>\t\t\n        <Row>\n          <Text fontSize=\"14px\" color=\"white\">New KUZO/block</Text>\n          <Text bold fontSize=\"14px\" color=\"white\">{TranslateString(539, '0.001')}</Text>\n        </Row>\n      </CardBody>\n\t  \n\n  \n        <a href=\"/pools\">\n    <img src=\"images/egg/32.png\"\n         alt=\"RugDoc Review\" width=\"624\" height=\"241\" /></a>\n         \n\n\n    </StyledCakeStats>\n  )\n}\n\nexport default CakeStats\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, Heading, Skeleton, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useGetStats } from 'hooks/api'\nimport { useTotalValue } from '../../../state/hooks'\nimport CardValue from './CardValue'\n\nconst StyledTotalValueLockedCard = styled(Card)`\n  background-repeat: no-repeat;\n  background-color: #3E0880;\n  background-position: top right;\n  align-items: center;\n  display: flex;\n  flex: 1;\n`\n\nconst TotalValueLockedCard = () => {\n  const TranslateString = useI18n()\n  // const data = useGetStats()\n  const totalValue = useTotalValue();\n  // const tvl = totalValue.toFixed(2);\n\n  return (\n    <StyledTotalValueLockedCard>\n      <CardBody>\n        <Heading size=\"lg\" mb=\"24px\" color=\"white\">\n          {TranslateString(999, 'Total Value Locked (TVL)')}\n        </Heading>\n        <>\n          {/* <Heading size=\"xl\">{`$${tvl}`}</Heading> */}\n          {/* <Heading size=\"xl\"> */}\n            <CardValue value={totalValue.toNumber()} prefix=\"$\" decimals={2}/>\n          {/* </Heading> */}\n          <Text color=\"white\">{TranslateString(999, 'Across all Farms and Pools')}</Text>\n        </>\n      </CardBody>\n    </StyledTotalValueLockedCard>\n  )\n}\n\nexport default TotalValueLockedCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport { Timeline } from 'react-twitter-widgets'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\nimport { useFarms } from '../../../state/hooks'\nimport useTheme from '../../../hooks/useTheme'\n\n\nconst StyledTwitterCard = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst TwitterCard = () => {\n  const TranslateString = useI18n()\n\n  const { isDark, toggleTheme, theme } = useTheme();\n\n  return (\n    <StyledTwitterCard>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\" color=\"#FFFFFF\">\n          {TranslateString(10003, 'News')}\n        </Heading>\n        <Timeline\n          dataSource={{\n            sourceType: 'profile',\n            screenName: 'KuzoDefi' // XXXXTWITTER\n          }}\n          options={{\n            height: '500',\n            chrome: \"noheader, nofooter\",\n            width: \"1300\",\n            theme: isDark ? 'dark' : 'light'\n          }}\n        />\n      </CardBody>\n    </StyledTwitterCard>\n  )\n}\n\nexport default TwitterCard\n","import React, {useState, useEffect} from 'react';\nimport styled from \"styled-components\";\nimport {Heading, Text} from \"@pancakeswap-libs/uikit\";\n\nconst ClockDiv = styled.div`\nfont-family: sans-serif;\ncolor: #fbf8f8;\ndisplay: inline-block;\nfont-weight: 100;\ntext-align: center;\nfont-size: 30px;\n`\n\nconst ClockTimeSide = styled.div`\npadding: 10px;\nborder-radius: 3px;\nbackground: #3E0880;\ndisplay: inline-block;\nmargin-right: 10px;\n`\n\nconst ClockTimeSideSpan = styled.span`\nborder-radius: 3px;\nbackground: #3E0880;\ndisplay: inline-block;\nmargin-right: 10px;\n`\n\nconst ClockTimeSideLabel = styled.span`\nborder-radius: 3px;\ndisplay: inline-block;\npadding-top: 5px;\nfont-size: 16px;\n`\n\nfunction getTimeRemaining(endtime) {\n    const total = Date.parse(endtime) - Date.parse(new Date().toString());\n    const seconds = Math.floor((total / 1000) % 60);\n    const minutes = Math.floor((total / 1000 / 60) % 60);\n    const hours = Math.floor((total / (1000 * 60 * 60)) % 24);\n    const days = Math.floor(total / (1000 * 60 * 60 * 24));\n\n    return {\n        total,\n        days,\n        hours,\n        minutes,\n        seconds\n    };\n}\n\n\nconst CountDown = () => {\n    const deadline = 'SMon Nov 15 2021 04:53:06 GMT-0500 (EST)';\n    const [timeRemaining, setTimeRemaining] = useState(getTimeRemaining(deadline));\n    const [show, setShow] = useState(false);\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            const temp = getTimeRemaining(deadline);\n            /* eslint-disable */\n            setTimeRemaining(timeRemaining => temp);\n            if (temp.total <= 0) {\n                setShow(show => false);\n            } else {\n                setShow(show => true);\n            }\n        }, 1000);\n        return () => clearInterval(interval);\n    }, []);\n\n    return (\n        show ?\n            <div>   \n                <div>\n                    <Heading as=\"h2\" size=\"lg\" mb=\"20px\" color=\"white\"\n                             style={{alignContent: \"center\", textAlign: \"center\" }}>Farm will start from block: <a style={{marginLeft:\"5px\", color:\"#ffffff\"}} href=\"https://ftmscan.com/block/countdown/18800147\">#22111110</a></Heading>\n                    <div style={{alignContent: \"center\", textAlign: \"center\"}}>\n                        \n                        <ClockDiv>\n                            <ClockTimeSide>\n                                <ClockTimeSideSpan className=\"days\">{timeRemaining.days}</ClockTimeSideSpan>\n                                <ClockTimeSideLabel>Days</ClockTimeSideLabel>\n                            </ClockTimeSide>\n                            <ClockTimeSide>\n                                <ClockTimeSideSpan className=\"hours\">{timeRemaining.hours}</ClockTimeSideSpan>\n                                <ClockTimeSideLabel>Hours</ClockTimeSideLabel>\n                            </ClockTimeSide>\n                            <ClockTimeSide>\n                                <ClockTimeSideSpan className=\"minutes\">{timeRemaining.minutes}</ClockTimeSideSpan>\n                                <ClockTimeSideLabel>Min</ClockTimeSideLabel>\n                            </ClockTimeSide>\n                            <ClockTimeSide>\n                                <ClockTimeSideSpan className=\"seconds\">{timeRemaining.seconds}</ClockTimeSideSpan>\n                                <ClockTimeSideLabel>Sec</ClockTimeSideLabel>\n                            </ClockTimeSide>\n                        </ClockDiv>\n                    </div>\n                </div>\n            </div>\n            : <div>\n            </div>\n    )\n}\n\nexport default CountDown","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Text, BaseLayout, LinkExternal } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport FarmStakingCard from './components/FarmStakingCard'\nimport StakeAssetCard from './components/StakeAssetCard'\nimport Timer from './components/Timer'\nimport CakeStats from './components/CakeStats'\nimport TotalValueLockedCard from './components/TotalValueLockedCard'\nimport TwitterCard from './components/TwitterCard'\nimport PancakeCard from './components/PancakeCard'\nimport EarnAPRCard from './components/EarnAPRCard'\nimport AuditCard from './components/AuditCard'\nimport CountDown from \"./CountDown\";\n\nconst Hero = styled.div`\n  \n  align-items: center;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  margin-bottom: 32px;\n  padding-top: 32px;\n  text-align: center;\n  color: white;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n  }\n`\n\n//\nconst HeroContainer = styled.div`\n  margin-bottom: 62px;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    background-color: #7A98F8;\n    border: 0px solid;\n    border-radius: 20px;\n    margin-bottom: 32px;\n  }\n`\n\nconst Title = styled.div`\n  font-size: 40px;\n  font-weight: 600;\n  margin-bottom: 15px;\n  display: none;\n // ${({ theme }) => theme.mediaQueries.sm} {\n    display: block;\n  }\n`\n//\nconst SecondRow = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n\n  @media (max-width: 400px) {\n    display: flex;\n    flex-direction: column;\n  }\n`\n\nconst Cards = styled(BaseLayout)`\n  display: flex;\n\n  align-items: stretch;\n  justify-content: center;\n  margin-bottom: 48px;\n\n  & > div {\n   // grid-column: span 6;\n   grid-column: span 8;\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 6;\n    }\n  }\n`\n\nconst PageContainer = styled(Page)`\n  width: 100%;\n  max-width: 100%;\n  margin-left: 0;\n  margin-right: 0;\n  padding-top: 20px;\n`\n\n\nconst HeadingContainer = styled(Page)`\n  width: 395px;\n  height: 180px;\n`\n\nconst Home: React.FC = () => {\n  const TranslateString = useI18n()\n\n  return (\n   \n\t<PageContainer>\n \n\t<Hero>\n  \n\n\n   \n<CountDown/>\n </Hero>\n \n \n      <div>\n        <Cards>\n\t\t  <FarmStakingCard />\n          <CakeStats />\n        </Cards>\n      </div>\n       <SecondRow>\n  <div>\n          <TotalValueLockedCard />\n  </div>    \n      \n      \n\n        <a href=\"/\">\n   <img src=\"images/egg/33.png\"\n         alt=\"Kuzo\" /></a>\n     \n    <a href=\"/\">\n    <img src=\"images/egg/34.png\"\n         alt=\"Kuzo\" /></a>\n         \n\n\n        </SecondRow>\n\n\t  <TwitterCard />\n  \n\t</PageContainer>\n  \n  )\n}\n\nexport default Home\n","import Web3 from 'web3'\nimport { provider as ProviderType } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils'\nimport erc20 from 'config/abi/erc20.json'\n\nexport const getContract = (provider: ProviderType, address: string) => {\n  const web3 = new Web3(provider)\n  const contract = new web3.eth.Contract((erc20 as unknown) as AbiItem, address)\n  return contract\n}\n\nexport const getAllowance = async (\n  lpContract: Contract,\n  masterChefContract: Contract,\n  account: string,\n): Promise<string> => {\n  try {\n    const allowance: string = await lpContract.methods.allowance(account, masterChefContract.options.address).call()\n    return allowance\n  } catch (e) {\n    return '0'\n  }\n}\n\nexport const getTokenBalance = async (\n  provider: ProviderType,\n  tokenAddress: string,\n  userAddress: string,\n): Promise<string> => {\n  const contract = getContract(provider, tokenAddress)\n  try {\n    const balance: string = await contract.methods.balanceOf(userAddress).call()\n    return balance\n  } catch (e) {\n    return '0'\n  }\n}\n"],"sourceRoot":""}