{"version":3,"sources":["components/ExpandableSectionButton/ExpandableSectionButton.tsx","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","views/Farms/components/FarmCard/CardHeading.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","utils/compoundApyHelpers.ts","views/Farms/components/FarmCard/ApyCalculatorModal.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/Farms.tsx","components/Spacer/Spacer.tsx","components/ModalActions/ModalActions.tsx","components/Input/Input.tsx","components/TokenInput/TokenInput.tsx","components/Tags.tsx","hooks/useStake.ts","config/index.ts","components/layout/Flex.tsx","hooks/useApprove.ts","hooks/useUnstake.ts","utils/erc20.ts"],"names":["Wrapper","styled","div","theme","colors","primary","ExpandableSectionButton","onClick","expanded","role","color","bold","defaultProps","getLiquidityUrlPathParts","quoteTokenAdresses","quoteTokenSymbol","tokenAddresses","firstPart","process","secondPart","StyledLinkExternal","LinkExternal","text","DetailsSection","isTokenOnly","bscScanAddress","removed","totalValueFormated","lpLabel","TranslateString","otherExchange","useI18n","liquidityUrlPathParts","justifyContent","href","external","Flex","MultiplierTag","Tag","CardHeading","multiplier","farmImage","risk","tokenSymbol","depositFee","isCommunityFarm","alignItems","mb","src","alt","width","height","flexDirection","flexWrap","exchange","variant","DepositModal","max","onConfirm","onDismiss","tokenName","tokenDecimals","depositFeeBP","useState","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","undefined","handleChange","useCallback","e","currentTarget","value","handleSelectMax","title","TokenInput","onSelectMax","onChange","symbol","ModalActions","disabled","BigNumber","isNaN","isLessThanOrEqualTo","a","WithdrawModal","IconButtonWrapper","Label","textSubtle","SciNumber","StakeAction","stakedBalance","tokenBalance","pid","usdStaked","quoteTokenDecimals","onStake","useStake","onUnstake","useUnstake","rawStakedBalance","getBalanceNumber","correctedStakeBalance","parseFloat","toPrecision","displayBalance","getCorrectedNumber","correctedDisplayUsd","displayUSD","useModal","onPresentDeposit","onPresentWithdraw","toExponential","split","toLocaleString","gt","mr","BalanceAndCompound","HarvestAction","earnings","usdEarnings","onReward","useHarvest","rawEarningsBalance","toFixed","size","marginBottom","toString","Action","CardActions","farm","ethereum","account","totalValue","requestedApproval","setRequestedApproval","useFarmFromPid","lpAddresses","useFarmUser","allowance","lpAddress","tokenAddress","lpName","lpSymbol","toUpperCase","isApproved","isGreaterThan","cakePrice","usePriceCakeBusd","lpContract","getContract","onApprove","useApprove","handleApprove","console","error","times","lpStakedTotal","textTransform","fontSize","pr","multipliedBy","dividedBy","mt","UnlockButton","calculateCakeEarnedPerThousandDollars","number","numberOfDays","apyAsDecimal","farmApy","daysAsDecimalOfYear","principal","finalAmount","Math","round","apyModalRoi","amountEarned","amountInvested","Grid","GridItem","Description","Text","ApyCalculatorModal","apy","toNumber","oneThousandDollarsWorthOfCake","cakeEarnedPerThousand1D","cakeEarnedPerThousand7D","cakeEarnedPerThousand30D","cakeEarnedPerThousand365D","ApyButton","onPresentApyModal","ml","StyledCardAccent","keyframes","FCard","props","card","background","Divider","borderColor","ExpandingWrapper","FarmCard","bnbPrice","showExpandableSection","setShowExpandableSection","toLowerCase","lpTotalInQuoteToken","QuoteToken","BNB","CAKE","Number","maximumFractionDigits","farmAPY","minimumFractionDigits","style","display","CardActionsContainer","Hero","mediaQueries","lg","Header","gradients","bubblegum","sm","Farms","farmsProps","path","useRouteMatch","farmsLP","useFarms","usePriceBnbBusd","useWallet","tokenMode","dispatch","useDispatch","fastRefresh","useRefresh","useEffect","fetchFarmUserDataAsync","stakedOnly","activeFarms","filter","inactiveFarms","stakedOnlyFarms","userData","farmsList","farmsToDisplay","map","cakeRewardPerYear","fKuzoPerBlock","poolWeight","pow","BLOCKS_PER_YEAR","comparedTo","as","opacity","Page","exact","StyledSpacer","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","primaryDark","StyledModalAction","children","l","React","Children","toArray","length","child","i","StyledInputWrapper","input","radii","default","StyledInput","Input","endAdornment","placeholder","startAdornment","StyledTokenInput","StyledTokenAdornmentWrapper","StyledMaxText","StyledTokenSymbol","span","NoFeeTag","outline","startIcon","CoreTag","ExchangeTag","CommunityTag","BinanceTag","useSousStake","sousId","isUsingBnb","masterChefContract","useMasterchef","sousChefContract","useSousChef","handleStake","amount","stake","sousStakeBnb","sousStake","updateUserStakedBalance","updateUserBalance","decimals","txHash","info","config","EXPONENTIAL_AT","DECIMAL_PLACES","FlexLayout","approve","tx","useSousApprove","updateUserAllowance","SYRUPIDS","useSousUnstake","isOldSyrup","includes","unstake","sousEmegencyUnstake","sousUnstake","updateUserPendingReward","provider","address","Web3","eth","Contract","erc20","getTokenBalance","userAddress","contract","methods","balanceOf","call","balance"],"mappings":"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","file":"static/js/11.5d6a9b1b.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap-libs/uikit'\n\nexport interface ExpandableSectionButtonProps {\n  onClick?: () => void\n  expanded?: boolean\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n\n  svg {\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\n  return (\n    <Wrapper aria-label=\"Hide or show expandable content\" role=\"button\" onClick={() => onClick()}>\n      <Text color=\"primary\" bold>\n        {expanded ? 'Hide' : 'Details'}\n      </Text>\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\n    </Wrapper>\n  )\n}\n\nExpandableSectionButton.defaultProps = {\n  expanded: false,\n}\n\nexport default ExpandableSectionButton\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\n// Each part of the url represents a different side of the LP pair.\n// In the URL, using the quote token 'BNB' is represented by 'ETH'\nconst getLiquidityUrlPathParts = ({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses }) => {\n  const chainId = process.env.REACT_APP_CHAIN_ID\n  const firstPart = quoteTokenSymbol === 'BNB' ? 'ETH' : quoteTokenAdresses[chainId]\n  const secondPart = tokenAddresses[chainId]\n  return `${firstPart}/${secondPart}`\n}\n\nexport default getLiquidityUrlPathParts\n","import React from 'react'\nimport useI18n from 'hooks/useI18n'\nimport styled from 'styled-components'\nimport { Text, Flex, Link, LinkExternal } from '@pancakeswap-libs/uikit'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { Address } from 'config/constants/types'\n\nexport interface ExpandableSectionProps {\n  isTokenOnly?: boolean\n  bscScanAddress?: string\n  removed?: boolean\n  totalValueFormated?: string\n  lpLabel?: string\n  quoteTokenAdresses?: Address\n  otherExchange?: string\n  quoteTokenSymbol?: string\n  tokenAddresses: Address\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  text-decoration: none;\n  font-weight: normal;\n  color: white;\n // color: ${({ theme }) => theme.colors.text};\n  display: flex;\n  align-items: center;\n\n  svg {\n    padding-left: 4px;\n    height: 18px;\n    width: auto;\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\n  isTokenOnly,\n  bscScanAddress,\n  removed,\n  totalValueFormated,\n  lpLabel,\n  quoteTokenAdresses,\n  quoteTokenSymbol,\n  tokenAddresses,\n  otherExchange\n}) => {\n  const TranslateString = useI18n()\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\n\n\n  return (\n    <Wrapper>\n      <Flex justifyContent=\"space-between\">\n        <Text>{TranslateString(316, 'Stake')}:</Text>\n        <StyledLinkExternal href={\n          isTokenOnly ?\n            `https://spookyswap.finance/swap?outputCurrency=${tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\n            :\n          `https://spookyswap.finance/add/${liquidityUrlPathParts}`\n        }>\n          {lpLabel}\n        </StyledLinkExternal>\n      </Flex>\n      {!removed && (\n        <Flex justifyContent=\"space-between\">\n          <Text>{TranslateString(23, 'Total Liquidity')}:</Text>\n          <Text>{totalValueFormated}</Text>\n        </Flex>\n      )}\n      <Flex justifyContent=\"flex-start\">\n        <Link external href={bscScanAddress} bold={false}>\n          {TranslateString(356, 'View on FTMScan')}\n        </Link>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Tag, Flex, Heading, Image } from '@pancakeswap-libs/uikit'\nimport { CommunityTag, CoreTag, NoFeeTag, RiskTag, ExchangeTag } from 'components/Tags'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  risk?: number\n  depositFee?: number\n  farmImage?: string\n  tokenSymbol?: string\n  isCommunityFarm?: boolean\n  otherExchange?: string\n}\n\nconst Wrapper = styled(Flex)`\n  svg {\n    margin-right: 0.25rem;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\n  lpLabel,\n  multiplier,\n  risk,\n  farmImage,\n  tokenSymbol,\n  depositFee,\n  isCommunityFarm,\n  otherExchange\n}) => {\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      <Image src={`/images/farms/${farmImage}.png`} alt={tokenSymbol} width={64} height={64} />\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n        <Heading mb=\"4px\">{lpLabel}</Heading>\n        <Flex justifyContent=\"flex-end\" flexWrap=\"wrap\">\n          {depositFee === 0 ? <NoFeeTag /> : null}\n          {otherExchange ? <ExchangeTag exchange={otherExchange} /> : null}\n          {isCommunityFarm ? <CommunityTag /> : null}\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\n        </Flex>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\nimport ModalActions from 'components/ModalActions'\nimport TokenInput from 'components/TokenInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface DepositModalProps {\n  isTokenOnly: boolean\n  max: BigNumber\n  onConfirm: (amount: string, decimals: number) => void\n  onDismiss?: () => void\n  tokenName?: string\n  tokenDecimals?: number\n  depositFeeBP?: number\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({ isTokenOnly, max, onConfirm, onDismiss, tokenName = '', tokenDecimals = 18 , depositFeeBP = 0}) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max, isTokenOnly ? tokenDecimals : undefined)\n  }, [max, isTokenOnly, tokenDecimals])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={`${TranslateString(316, 'Deposit')} ${tokenName} Tokens`} onDismiss={onDismiss}>\n      <TokenInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n        depositFeeBP={depositFeeBP}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx || new BigNumber(val).isNaN() || new BigNumber(val).isLessThanOrEqualTo(0)}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val, isTokenOnly ? tokenDecimals : undefined)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\nimport ModalActions from 'components/ModalActions'\nimport TokenInput from 'components/TokenInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface WithdrawModalProps {\n  isTokenOnly: boolean\n  max: BigNumber\n  onConfirm: (amount: string, decimals: number) => void\n  onDismiss?: () => void\n  tokenName?: string\n  tokenDecimals?: number\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ isTokenOnly, onConfirm, onDismiss, max, tokenName = '', tokenDecimals = 18}) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max, isTokenOnly ? tokenDecimals : undefined)\n  }, [max, isTokenOnly, tokenDecimals])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={`Withdraw ${tokenName}`} onDismiss={onDismiss}>\n      <TokenInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx || new BigNumber(val).isNaN() || new BigNumber(val).isLessThanOrEqualTo(0)}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val, isTokenOnly ? tokenDecimals : undefined)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport useStake from 'hooks/useStake'\nimport useUnstake from 'hooks/useUnstake'\nimport { getBalanceNumber, getCorrectedNumber } from 'utils/formatBalance'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\n\ninterface FarmCardActionsProps {\n  isTokenOnly?: boolean\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenDecimals?: number\n  tokenName?: string\n  pid?: number\n  depositFeeBP?: number\n  usdStaked: BigNumber,\n  quoteTokenDecimals: number\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 12px;\n  align: left;\n  display: inline;\n`\n\nconst SciNumber = styled.div`\n  display: flex;\n  white-space: nowrap;\n  overflow: hidden;\n  justify-content:center;\n  align-items:baseline;\n  white-space: pre;\n`\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\n  isTokenOnly,\n  stakedBalance,\n  tokenBalance,\n  tokenDecimals,\n  tokenName,\n  pid,\n  depositFeeBP,\n  usdStaked,\n  quoteTokenDecimals\n}) => {\n  const TranslateString = useI18n()\n  const { onStake } = useStake(pid)\n  const { onUnstake } = useUnstake(pid)\n\n  const rawStakedBalance = getBalanceNumber(stakedBalance, tokenDecimals);\n  const correctedStakeBalance = parseFloat(rawStakedBalance.toPrecision(4));\n  const displayBalance = getCorrectedNumber(correctedStakeBalance);\n\n  const rawDisplayUsd = getBalanceNumber(usdStaked, isTokenOnly ? tokenDecimals : quoteTokenDecimals)\n  // const correctedDisplayUsd = parseFloat(rawDisplayUsd.toPrecision(4));\n  const correctedDisplayUsd = rawDisplayUsd;\n  const displayUSD = getCorrectedNumber(correctedDisplayUsd);\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal isTokenOnly={isTokenOnly} max={tokenBalance} onConfirm={onStake} tokenName={tokenName} tokenDecimals={tokenDecimals} depositFeeBP={depositFeeBP} />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal isTokenOnly={isTokenOnly}  max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} tokenDecimals={tokenDecimals}/>,\n  )\n\n  const renderStakingButtons = () => {\n    return rawStakedBalance === 0 ? (\n      <Button onClick={onPresentDeposit}>{TranslateString(999, 'Stake')}</Button>\n    ) : (\n      <IconButtonWrapper>\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\n          <MinusIcon color=\"primary\" />\n        </IconButton>\n        <IconButton variant=\"tertiary\" onClick={onPresentDeposit}>\n          <AddIcon color=\"primary\" />\n        </IconButton>\n      </IconButtonWrapper>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={correctedStakeBalance === 0 ? 'textDisabled' : 'text'}>\n        <SciNumber>\n          {displayBalance} \n          {correctedStakeBalance < 1e-5  && correctedStakeBalance>0 ? (\n            <Label>{'  '}e{correctedStakeBalance.toExponential(2).split('e')[1].toLocaleString()}</Label>\n          ) : (\n            null\n          )}{' '}\n        </SciNumber>{' '}\n        <SciNumber>\n          {usdStaked.gt(0) ? <Label>~$\n          {displayUSD} \n          {correctedDisplayUsd < 1e-5  && correctedDisplayUsd>0 ? (\n            <Label>{'  '}e{correctedDisplayUsd.toExponential(2).split('e')[1].toLocaleString()}</Label>\n          ) : (\n            null\n          )}\n          {' '} USD</Label> : null}\n        </SciNumber>\n      </Heading>\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useHarvest } from 'hooks/useHarvest'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport styled from 'styled-components'\nimport useStake from '../../../../hooks/useStake'\n\ninterface FarmCardActionsProps {\n  earnings?: BigNumber\n  pid?: number,\n  usdEarnings: BigNumber\n}\n\nconst BalanceAndCompound = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  flex-direction: column;\n`\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 12px;\n`\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid, usdEarnings }) => {\n  const TranslateString = useI18n()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvest(pid)\n  const { onStake } = useStake(pid)\n\n  const rawEarningsBalance = getBalanceNumber(earnings)\n  const displayBalance = rawEarningsBalance.toLocaleString()\n \n  return (\n    <Flex mb='8px' justifyContent='space-between' alignItems='center'>\n        \n      <Heading color={rawEarningsBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}<Label>~${(usdEarnings).toFixed(2)} USD</Label></Heading>\n      <BalanceAndCompound>\n        {pid === 5 ?\n        // {false ?\n          <Button\n            disabled={rawEarningsBalance === 0 || pendingTx}\n            size='sm'\n            variant='tertiary'\n            marginBottom='15px'\n            onClick={async () => {\n              setPendingTx(true)\n              await onStake(rawEarningsBalance.toString(), 18)\n              setPendingTx(false)\n            }}\n          >\n            {TranslateString(999, 'Compound')}\n          </Button>\n          : null}\n        <Button\n          disabled={rawEarningsBalance === 0 || pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onReward()\n            setPendingTx(false)\n          }}\n        >\n\n          {TranslateString(999, 'Harvest')}\n        </Button>\n      </BalanceAndCompound>\n    </Flex>\n  )\n}\n\nexport default HarvestAction\n","import React, { useMemo, useState, useCallback } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { provider } from 'web3-core'\nimport { getContract } from 'utils/erc20'\nimport { Button, Flex, Text } from '@pancakeswap-libs/uikit'\nimport { Farm } from 'state/types'\nimport { useFarmFromPid, useFarmUser, usePriceCakeBusd } from 'state/hooks'\nimport useI18n from 'hooks/useI18n'\nimport UnlockButton from 'components/UnlockButton'\nimport { useApprove } from 'hooks/useApprove'\nimport StakeAction from './StakeAction'\nimport HarvestAction from './HarvestAction'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\ninterface FarmCardActionsProps {\n  farm: FarmWithStakedValue\n  ethereum?: provider\n  account?: string\n  totalValue?: BigNumber\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, ethereum, account, totalValue }) => {\n  const TranslateString = useI18n()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { pid, lpAddresses, tokenAddresses, isTokenOnly, depositFeeBP } = useFarmFromPid(farm.pid)\n  const { allowance, tokenBalance, stakedBalance, earnings } = useFarmUser(pid)\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const tokenAddress = tokenAddresses[process.env.REACT_APP_CHAIN_ID];\n  const lpName = farm.lpSymbol.toUpperCase()\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n  const cakePrice = usePriceCakeBusd()\n\n  const lpContract = useMemo(() => {\n    if(isTokenOnly){\n      return getContract(ethereum as provider, tokenAddress);\n    }\n    return getContract(ethereum as provider, lpAddress);\n  }, [ethereum, lpAddress, tokenAddress, isTokenOnly])\n\n  const { onApprove } = useApprove(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove])\n  let usdStaked = stakedBalance\n\n  if (totalValue) {\n    usdStaked = usdStaked.times(new BigNumber(totalValue).div(farm.lpStakedTotal))\n  }\n\n  const renderApprovalOrStakeButton = () => {\n    return isApproved ? (\n      <StakeAction\n        isTokenOnly={isTokenOnly}\n        stakedBalance={stakedBalance}\n        tokenBalance={tokenBalance}\n        tokenDecimals={farm.tokenDecimals}\n        tokenName={lpName}\n        pid={pid}\n        depositFeeBP={depositFeeBP}\n        usdStaked={usdStaked}\n        quoteTokenDecimals={farm.quoteTokenDecimals}\n      />    ) : (\n      <Button mt=\"8px\" disabled={requestedApproval} onClick={handleApprove}>\n        {TranslateString(999, 'Approve Contract')}\n      </Button>\n    )\n  }\n\n  return (\n    <Action>\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          {/* TODO: Is there a way to get a dynamic value here from useFarmFromSymbol? */}\n          KUZO\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(999, 'Earned')}\n        </Text>\n      </Flex>\n      <HarvestAction earnings={earnings} pid={pid} usdEarnings={cakePrice.multipliedBy(earnings.dividedBy(10 ** 18))} />\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          {lpName}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(999, 'Staked')}\n        </Text>\n      </Flex>\n      {!account ? <UnlockButton mt=\"8px\"  /> : renderApprovalOrStakeButton()}\n    </Action>\n  )\n}\n\nexport default CardActions\n","const roundToTwoDp = (number) => Math.round(number * 100) / 100\n\nexport const calculateCakeEarnedPerThousandDollars = ({ numberOfDays, farmApy, cakePrice }) => {\n  // Everything here is worked out relative to a year, with the asset compounding daily\n  const timesCompounded = 365\n  //   We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\n  const apyAsDecimal = farmApy / 100\n  const daysAsDecimalOfYear = numberOfDays / timesCompounded\n  //   Calculate the starting CAKE balance with a dollar balance of $1000.\n  const principal = 1000 / cakePrice\n\n  // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\n  const finalAmount = principal * (1 + apyAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear)\n\n  // To get the cake earned, deduct the amount after compounding (finalAmount) from the starting CAKE balance (principal)\n  const interestEarned = finalAmount - principal\n  return roundToTwoDp(interestEarned)\n}\n\nexport const apyModalRoi = ({ amountEarned, amountInvested }) => {\n  const percentage = (amountEarned / amountInvested) * 100\n  return percentage.toFixed(2)\n}\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { Modal, Text, LinkExternal, Flex } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { calculateCakeEarnedPerThousandDollars, apyModalRoi } from 'utils/compoundApyHelpers'\nimport { Address } from 'config/constants/types'\n\ninterface ApyCalculatorModalProps {\n  onDismiss?: () => void\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apy?: BigNumber\n  quoteTokenAdresses?: Address\n  quoteTokenSymbol?: string\n  tokenAddresses: Address\n}\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(4, auto);\n  margin-bottom: 24px;\n`\n\nconst GridItem = styled.div`\n  margin-bottom: '10px';\n`\n\nconst Description = styled(Text)`\n  max-width: 320px;\n  margin-bottom: 28px;\n`\n\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\n  onDismiss,\n  lpLabel,\n  quoteTokenAdresses,\n  quoteTokenSymbol,\n  tokenAddresses,\n  cakePrice,\n  apy,\n}) => {\n  const TranslateString = useI18n()\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\n  const farmApy = apy.times(new BigNumber(100)).toNumber()\n  const oneThousandDollarsWorthOfCake = 1000 / cakePrice.toNumber()\n\n  const cakeEarnedPerThousand1D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 1, farmApy, cakePrice })\n  const cakeEarnedPerThousand7D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 7, farmApy, cakePrice })\n  const cakeEarnedPerThousand30D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 30, farmApy, cakePrice })\n  const cakeEarnedPerThousand365D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 365, farmApy, cakePrice })\n\n  return (\n    <Modal title=\"ROI\" onDismiss={onDismiss}>\n      <Grid>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(999, 'Timeframe')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(999, 'ROI')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(999, 'KUZO per $1000')}\n          </Text>\n        </GridItem>\n        {/* 1 day row */}\n        <GridItem>\n          <Text>1d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand1D}</Text>\n        </GridItem>\n        {/* 7 day row */}\n        <GridItem>\n          <Text>7d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand7D}</Text>\n        </GridItem>\n        {/* 30 day row */}\n        <GridItem>\n          <Text>30d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand30D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand30D}</Text>\n        </GridItem>\n        {/* 365 day / APY row */}\n        <GridItem>\n          <Text>365d(APY)</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand365D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand365D}</Text>\n        </GridItem>\n      </Grid>\n      <Description fontSize=\"12px\" color=\"textSubtle\">\n        {TranslateString(\n          999,\n          'Calculated based on current rates. Compounding once daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\n        )}\n      </Description>\n      <Flex justifyContent=\"center\">\n        <LinkExternal href={`https://spookyswap.finance/add/${liquidityUrlPathParts}`}>\n          {TranslateString(999, 'Get')} {lpLabel}\n        </LinkExternal>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default ApyCalculatorModal\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { CalculateIcon, IconButton, useModal } from '@pancakeswap-libs/uikit'\nimport { Address } from 'config/constants/types'\nimport ApyCalculatorModal from './ApyCalculatorModal'\n\nexport interface ApyButtonProps {\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apy?: BigNumber\n  quoteTokenAdresses?: Address\n  quoteTokenSymbol?: string\n  tokenAddresses: Address\n}\n\nconst ApyButton: React.FC<ApyButtonProps> = ({\n  lpLabel,\n  quoteTokenAdresses,\n  quoteTokenSymbol,\n  tokenAddresses,\n  cakePrice,\n  apy,\n}) => {\n  const [onPresentApyModal] = useModal(\n    <ApyCalculatorModal\n      lpLabel={lpLabel}\n      quoteTokenAdresses={quoteTokenAdresses}\n      quoteTokenSymbol={quoteTokenSymbol}\n      tokenAddresses={tokenAddresses}\n      cakePrice={cakePrice}\n      apy={apy}\n    />,\n  )\n\n  return (\n    <IconButton onClick={onPresentApyModal} variant=\"text\" size=\"sm\" ml=\"4px\">\n      <CalculateIcon />\n    </IconButton>\n  )\n}\n\nexport default ApyButton\n","import React, { useMemo, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled, { keyframes } from 'styled-components'\nimport { Flex, Text, Skeleton } from '@pancakeswap-libs/uikit'\nimport { communityFarms } from 'config/constants'\nimport { Farm } from 'state/types'\nimport { provider } from 'web3-core'\nimport useI18n from 'hooks/useI18n'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\nimport { QuoteToken } from 'config/constants/types'\nimport DetailsSection from './DetailsSection'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\nimport ApyButton from './ApyButton'\n\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\n const RainbowLight = keyframes`\n  0% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n  100% {\n    background-position: 0% 50%;\n  }\n`\n\nconst StyledCardAccent = styled.div`\n  \n // background: #E9EAEB;\n  background: rgb(62,226,155);\n background: -moz-linear-gradient(72deg, rgba(62,226,155,1) 14%, rgba(170,213,164,1) 72%, rgba(77,153,100,1) 96%);\n background: -webkit-linear-gradient(72deg, rgba(62,226,155,1) 14%, rgba(170,213,164,1) 72%, rgba(77,153,100,1) 96%);\n background: linear-gradient(72deg, rgba(62,226,155,1) 14%, rgba(170,213,164,1) 72%, rgba(77,153,100,1) 96%);\n filter: progid:DXImageTransform.Microsoft.gradient(startColorstr=\"#3ee29b\",endColorstr=\"#4d9964\",GradientType=1);\n  border-radius: 32px;\n  filter: blur(6px);\n  position: absolute;\n  top: 0px;\n  right: 0px;\n  bottom: 0px;\n  left: 0px;\n  z-index: -1;\n`\n\nconst FCard = styled.div`\n  align-self: baseline;\n // background: #E9EAEB;\n  background: ${(props) => props.theme.card.background};\n  border-radius: 32px;\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 24px;\n  position: relative;\n  text-align: center;\n`\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  height: 1px;\n  margin: 28px auto;\n  width: 100%;\n`\n\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\n  overflow: hidden;\n`\n\ninterface FarmCardProps {\n  farm: FarmWithStakedValue\n  removed: boolean\n  cakePrice?: BigNumber\n  bnbPrice?: BigNumber\n  ethereum?: provider\n  account?: string\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, bnbPrice, ethereum, account }) => {\n  const TranslateString = useI18n()\n\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n\n  // const isCommunityFarm = communityFarms.includes(farm.tokenSymbol)\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\n  // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\n  // const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\n  const farmImage = farm.isTokenOnly ? farm.tokenSymbol.toLowerCase() : `${farm.tokenSymbol.toLowerCase()}-${farm.quoteTokenSymbol.toLowerCase()}`\n\n  const totalValue: BigNumber = useMemo(() => {\n    if (!farm.lpTotalInQuoteToken) {\n      return null\n    }\n    if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n      return bnbPrice.times(farm.lpTotalInQuoteToken)\n    }\n    if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n      return cakePrice.times(farm.lpTotalInQuoteToken)\n    }\n    return farm.lpTotalInQuoteToken\n  }, [bnbPrice, cakePrice, farm.lpTotalInQuoteToken, farm.quoteTokenSymbol])\n\n  const totalValueFormated = totalValue\n    ? `$${Number(totalValue).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    : '-'\n\n  const lpLabel = farm.lpSymbol\n  const earnLabel = 'KUZO'\n  const farmAPY = farm.apy && farm.apy.times(new BigNumber(100)).toNumber().toLocaleString(undefined, {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  })\n\n  const { quoteTokenAdresses, quoteTokenSymbol, tokenAddresses, risk } = farm\n\n  return (\n    <FCard>\n      {farm.tokenSymbol === 'KUZO' && <StyledCardAccent />}\n      <CardHeading\n        lpLabel={lpLabel}\n        multiplier={farm.multiplier}\n        risk={risk}\n        depositFee={farm.depositFeeBP}\n        farmImage={farmImage}\n        tokenSymbol={farm.tokenSymbol}\n\t\totherExchange={farm.otherExchange}\n      />\n      {!removed && (\n        <Flex justifyContent='space-between' alignItems='center'>\n          <Text>{TranslateString(352, 'APR')}:</Text>\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\n            {farm.apy ? (\n              <>\n                <ApyButton\n                  lpLabel={lpLabel}\n                  quoteTokenAdresses={quoteTokenAdresses}\n                  quoteTokenSymbol={quoteTokenSymbol}\n                  tokenAddresses={tokenAddresses}\n                  cakePrice={cakePrice}\n                  apy={farm.apy}\n                />\n                {farmAPY}%\n              </>\n            ) : (\n              <Skeleton height={24} width={80} />\n            )}\n          </Text>\n        </Flex>\n      )}\n      <Flex justifyContent='space-between'>\n        <Text>{TranslateString(318, 'Earn')}:</Text>\n        <Text bold>{earnLabel}</Text>\n      </Flex>\n      <Flex justifyContent='space-between'>\n        <Text style={{ fontSize: '24px' }}>{TranslateString(10001, 'Deposit Fee')}:</Text>\n        <Text bold style={{ fontSize: '24px' }}>{(farm.depositFeeBP / 100)}%</Text>\n      </Flex>\n      <CardActionsContainer farm={farm} ethereum={ethereum} account={account} />\n      <Divider />\n      <ExpandableSectionButton\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\n        expanded={showExpandableSection}\n      />\n      <ExpandingWrapper expanded={showExpandableSection}>\n        <DetailsSection\n          removed={removed}\n          isTokenOnly={farm.isTokenOnly}\n          bscScanAddress={\n            farm.isTokenOnly ?\n              `https://ftmscan.com/address/${farm.tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\n              :\n              `https://ftmscan.com/address/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`\n          }\n          totalValueFormated={totalValueFormated}\n          lpLabel={lpLabel}\n          quoteTokenAdresses={quoteTokenAdresses}\n          quoteTokenSymbol={quoteTokenSymbol}\n          tokenAddresses={tokenAddresses}\n\t\t  otherExchange={farm.otherExchange}\n        />\n      </ExpandingWrapper>\n    </FCard>\n  )\n}\n\nexport default FarmCard\n","import React, { useEffect, useCallback, useState } from 'react'\nimport { Route, useRouteMatch } from 'react-router-dom'\nimport styled from 'styled-components'\nimport { useDispatch } from 'react-redux'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport { Image, Heading } from '@pancakeswap-libs/uikit'\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK, CAKE_POOL_PID } from 'config'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport { useFarms, usePriceBnbBusd, usePriceCakeBusd} from 'state/hooks'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarmUserDataAsync } from 'state/actions'\nimport { QuoteToken } from 'config/constants/types'\nimport useI18n from 'hooks/useI18n'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport Divider from './components/Divider'\n\nexport interface FarmsProps{\n  tokenMode?: boolean\n}\n\nconst Hero = styled.div`\n  align-items: left;\n  background: #9012fe; /* fallback */\n  background-image: url('IMAGE_URL'); /* fallback */\n  background-image: url('images/farms/3d-model.png'),\n\n // opacity: 0.9;\n    opacity: 1;\n\n  background-repeat: no-repeat;\n  background-position: top center;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n    align-items: left;\n  color: white;\n  height: 245px;\n  margin: auto;\n  margin-bottom: 32px;\n  border-radius: 24px;\n  padding-top: 116px;\n  padding-left: 40px;\n  text-align: left;\n  background image: right;\n  font-color: white;\n  ${({ theme }) => theme.mediaQueries.lg} {\n    height: 165px;\n    padding-top: 0;\n  }\n`\n\nconst Header = styled.div`\n\n  padding: 32px 0px;\n  text-align: left;\n  padding-left: 16px;\n  padding-right: 16px;\n  // background: black;\n //  background: ${({ theme }) => theme.colors.gradients.bubblegum};\n // ${({ theme }) => theme.mediaQueries.sm} {\n    padding-left: 24px;\n    padding-right: 24px;\n  }\n`\n\nconst Farms: React.FC<FarmsProps> = (farmsProps) => {\n  const { path } = useRouteMatch()\n  const TranslateString = useI18n()\n  const farmsLP = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const bnbPrice = usePriceBnbBusd()\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const {tokenMode} = farmsProps;\n\n  const dispatch = useDispatch()\n  const { fastRefresh } = useRefresh()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchFarmUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const [stakedOnly, setStakedOnly] = useState(false)\n\n  const activeFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier !== '0X')\n  const inactiveFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier === '0X')\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  // /!\\ This function will be removed soon\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\n  // to retrieve assets prices against USD\n  const farmsList = useCallback(\n    (farmsToDisplay, removed: boolean) => {\n      // const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\n      const farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        // if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\n        //   return farm\n        // }\n        const cakeRewardPerBlock = new BigNumber(farm.fKuzoPerBlock || 1).times(new BigNumber(farm.poolWeight)).div(new BigNumber(10).pow(18))\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\n\n        let apy = cakePrice.times(cakeRewardPerYear);\n\n        let totalValue = new BigNumber(farm.lpTotalInQuoteToken || 0);\n\n        // if (farm.quoteTokenSymbol === QuoteToken.WMATIC) {\n        //   totalValue = totalValue.times(bnbPrice);\n        // }\n\n        if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n          totalValue = totalValue.times(cakePrice);\n        }\n\n        if(totalValue.comparedTo(0) > 0){\n          apy = apy.div(totalValue);\n        }\n\n        return { ...farm, apy }\n      })\n      return farmsToDisplayWithAPY.map((farm) => (\n        <FarmCard\n          key={farm.pid}\n          farm={farm}\n          removed={removed}\n          bnbPrice={bnbPrice}\n          cakePrice={cakePrice}\n          ethereum={ethereum}\n          account={account}\n        />\n      ))\n    },\n    [account, cakePrice, ethereum, bnbPrice],\n  )\n\n  return (\n    <>\n    <Hero>\n      <Header>\n        <Heading as=\"h1\" size=\"xxl\" color=\"#ffffff\" mb=\"18px\" style={{ opacity: '1', color: \"#ffffff\" }}>\n        {tokenMode ? TranslateString(999, 'Pools') : TranslateString(999, 'Farms')}\n        </Heading>\n        <Heading size=\"lg\" color=\"text\" style={{ opacity: '1000', color: \"white\" }}>\n        {tokenMode ? TranslateString(999, 'Stake LP tokens to earn.') : TranslateString(999, 'Stake Liquidity Pool (LP) tokens to earn.')}\n        </Heading>\n      </Header>\n      </Hero>\n      <Page>\n\n        <div>\n          <FlexLayout>\n            <Route exact path={`${path}`}>\n              {stakedOnly ? farmsList(stakedOnlyFarms, false) : farmsList(activeFarms, false)}\n            </Route>\n            <Route exact path={`${path}/history`}>\n              {farmsList(inactiveFarms, true)}\n            </Route>\n          </FlexLayout>\n        </div>\n      </Page>\n    </>\n  )\n}\n\nexport default Farms\n","import React, { useContext } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\ninterface SpacerProps {\n  size?: 'sm' | 'md' | 'lg'\n}\n\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\n  const { spacing } = useContext(ThemeContext)\n\n  let s: number\n  switch (size) {\n    case 'lg':\n      s = spacing[6]\n      break\n    case 'sm':\n      s = spacing[2]\n      break\n    case 'md':\n    default:\n      s = spacing[4]\n  }\n\n  return <StyledSpacer size={s} />\n}\n\ninterface StyledSpacerProps {\n  size: number\n}\n\nconst StyledSpacer = styled.div<StyledSpacerProps>`\n  height: ${(props) => props.size}px;\n  width: ${(props) => props.size}px;\n`\n\nexport default Spacer\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport Spacer from '../Spacer'\n\nconst ModalActions: React.FC = ({ children }) => {\n  const l = React.Children.toArray(children).length\n  return (\n    <StyledModalActions>\n      {React.Children.map(children, (child, i) => (\n        <>\n          <StyledModalAction>{child}</StyledModalAction>\n          {i < l - 1 && <Spacer />}\n        </>\n      ))}\n    </StyledModalActions>\n  )\n}\n\nconst StyledModalActions = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\n  display: flex;\n  margin: 0;\n  padding: ${(props) => props.theme.spacing[4]}px;\n`\n\nconst StyledModalAction = styled.div`\n  flex: 1;\n  text-align: center;\n`\n\nexport default ModalActions\n","import React from 'react'\nimport styled from 'styled-components'\n\nexport interface InputProps {\n  endAdornment?: React.ReactNode\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  startAdornment?: React.ReactNode\n  value: string\n}\n\nconst Input: React.FC<InputProps> = ({ endAdornment, onChange, placeholder, startAdornment, value }) => {\n  return (\n    <StyledInputWrapper>\n      {!!startAdornment && startAdornment}\n      <StyledInput placeholder={placeholder} value={value} onChange={onChange} />\n      {!!endAdornment && endAdornment}\n    </StyledInputWrapper>\n  )\n}\n\nconst StyledInputWrapper = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.input};\n  border-radius: ${(props) => props.theme.radii.default};\n  display: flex;\n  height: 72px;\n  padding: 0 ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledInput = styled.input`\n  width: 100%;\n  background: none;\n  border: 0;\n  color: ${(props) => props.theme.colors.primary};\n  font-size: 18px;\n  flex: 1;\n  height: 56px;\n  margin: 0;\n  padding: 0;\n  outline: none;\n`\n\nexport default Input\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js/bignumber'\nimport { Button } from '@pancakeswap-libs/uikit'\nimport useI18n from '../../hooks/useI18n'\nimport Input, { InputProps } from '../Input'\n\ninterface TokenInputProps extends InputProps {\n  max: number | string\n  symbol: string\n  onSelectMax?: () => void\n  depositFeeBP?: number\n}\n\nconst TokenInput: React.FC<TokenInputProps> = ({ max, symbol, onChange, onSelectMax, value, depositFeeBP = 0 }) => {\n  const TranslateString = useI18n()\n  return (\n    <StyledTokenInput>\n      <StyledMaxText>\n        {max.toLocaleString()} {symbol} {TranslateString(526, 'Available')}\n      </StyledMaxText>\n      <Input\n        endAdornment={\n          <StyledTokenAdornmentWrapper>\n            <StyledTokenSymbol>{symbol}</StyledTokenSymbol>\n            <StyledSpacer />\n            <div>\n              <Button size=\"sm\" onClick={onSelectMax}>\n                {TranslateString(452, 'Max')}\n              </Button>\n            </div>\n          </StyledTokenAdornmentWrapper>\n        }\n        onChange={onChange}\n        placeholder=\"0\"\n        value={value}\n      />\n      {\n        depositFeeBP > 0 ?\n          <StyledMaxText>\n            {TranslateString(10001, 'Deposit Fee')}: {new BigNumber(value || 0).times(depositFeeBP/10000).toString()} {symbol}\n          </StyledMaxText>\n          :\n          null\n      }\n\n    </StyledTokenInput>\n  )\n}\n\nconst StyledTokenInput = styled.div``\n\nconst StyledSpacer = styled.div`\n  width: ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledTokenAdornmentWrapper = styled.div`\n  align-items: center;\n  display: flex;\n`\n\nconst StyledMaxText = styled.div`\n  align-items: center;\n  color: ${(props) => props.theme.colors.primary};\n  display: flex;\n  font-size: 14px;\n  font-weight: 700;\n  height: 44px;\n  justify-content: flex-end;\n`\n\nconst StyledTokenSymbol = styled.span`\n  color: ${(props) => props.theme.colors.primary};\n  font-weight: 700;\n`\n\nexport default TokenInput\n","import React from 'react'\nimport { Tag, VerifiedIcon, CommunityIcon, BinanceIcon } from '@pancakeswap-libs/uikit'\n\nconst NoFeeTag = () => (\n  <Tag variant=\"success\" outline startIcon={<VerifiedIcon />}>\n    No Fees\n  </Tag>\n)\n\nconst RiskTag = ({ risk }) => (\n  <Tag variant={risk >= 3 ? 'failure' : 'success'} outline startIcon={<VerifiedIcon />}>\n    Risk {risk}\n  </Tag>\n)\n\nconst CoreTag = () => (\n  <Tag variant='secondary' outline startIcon={<VerifiedIcon />}>\n    Core\n  </Tag>\n)\n\nconst ExchangeTag = ({exchange}) => (\n  <Tag variant='secondary' outline >\n    {exchange}\n  </Tag>\n)\n\nconst CommunityTag = () => (\n  <Tag variant='textSubtle' outline startIcon={<CommunityIcon />}>\n    Community\n  </Tag>\n)\n\nconst BinanceTag = () => (\n  <Tag variant='binance' outline startIcon={<BinanceIcon />}>\n    Binance\n  </Tag>\n)\n\nexport { CoreTag, CommunityTag, BinanceTag, RiskTag, NoFeeTag, ExchangeTag }\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync, updateUserStakedBalance, updateUserBalance } from 'state/actions'\nimport { stake, sousStake, sousStakeBnb } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nconst useStake = (pid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleStake = useCallback(\n    async (amount: string, decimals: number) => {\n      const txHash = await stake(masterChefContract, pid, amount, account, decimals)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport const useSousStake = (sousId, isUsingBnb = false) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      if (sousId === 0) {\n        await stake(masterChefContract, 0, amount, account)\n      } else if (isUsingBnb) {\n        await sousStakeBnb(sousChefContract, amount, account)\n      } else {\n        await sousStake(sousChefContract, amount, account)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n    },\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStake\n","import BigNumber from 'bignumber.js/bignumber'\n\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n})\n\nexport const CAKE_PER_BLOCK = new BigNumber(0.1)\nexport const BLOCKS_PER_YEAR = new BigNumber(15017142) // 15017142 ?\nexport const BSC_BLOCK_TIME = 2\n\nexport const CAKE_POOL_PID = 2\n","import styled from 'styled-components'\n\nconst FlexLayout = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  & > * {\n    min-width: 280px;\n    max-width: 31.5%;\n    width: 100%;\n    margin: 0 8px;\n    margin-bottom: 32px;\n  }\n`\n\nexport default FlexLayout\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Contract } from 'web3-eth-contract'\nimport { ethers } from 'ethers'\nimport { useDispatch } from 'react-redux'\nimport { updateUserAllowance, fetchFarmUserDataAsync } from 'state/actions'\nimport { approve } from 'utils/callHelpers'\nimport { useMasterchef, useCake, useSousChef, useLottery } from './useContract'\n\n// Approve a Farm\nexport const useApprove = (lpContract: Contract) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, masterChefContract, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, masterChefContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve a Pool\nexport const useSousApprove = (lpContract: Contract, sousId) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, sousChefContract, account)\n      dispatch(updateUserAllowance(sousId, account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, sousChefContract, sousId])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve the lottery\nexport const useLotteryApprove = () => {\n  const { account }: { account: string } = useWallet()\n  const cakeContract = useCake()\n  const lotteryContract = useLottery()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(cakeContract, lotteryContract, account)\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, cakeContract, lotteryContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve an IFO\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\n  const { account } = useWallet()\n  const onApprove = useCallback(async () => {\n    try {\n      const tx = await tokenContract.methods\n        .approve(spenderAddress, ethers.constants.MaxUint256)\n        .send({ from: account })\n      return tx\n    } catch {\n      return false\n    }\n  }, [account, spenderAddress, tokenContract])\n\n  return onApprove\n}\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport {\n  fetchFarmUserDataAsync,\n  updateUserStakedBalance,\n  updateUserBalance,\n  updateUserPendingReward,\n} from 'state/actions'\nimport { unstake, sousUnstake, sousEmegencyUnstake } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nconst useUnstake = (pid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleUnstake = useCallback(\n    async (amount: string, decimals: number) => {\n      const txHash = await unstake(masterChefContract, pid, amount, account, decimals)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nconst SYRUPIDS = [5, 6, 3, 22, 23]\n\nexport const useSousUnstake = (sousId) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n  const isOldSyrup = SYRUPIDS.includes(sousId)\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      if (sousId === 0) {\n        const txHash = await unstake(masterChefContract, 0, amount, account)\n        console.info(txHash)\n      } else if (isOldSyrup) {\n        const txHash = await sousEmegencyUnstake(sousChefContract, amount, account)\n        console.info(txHash)\n      } else {\n        const txHash = await sousUnstake(sousChefContract, amount, account)\n        console.info(txHash)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n      dispatch(updateUserPendingReward(sousId, account))\n    },\n    [account, dispatch, isOldSyrup, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstake\n","import Web3 from 'web3'\nimport { provider as ProviderType } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils'\nimport erc20 from 'config/abi/erc20.json'\n\nexport const getContract = (provider: ProviderType, address: string) => {\n  const web3 = new Web3(provider)\n  const contract = new web3.eth.Contract((erc20 as unknown) as AbiItem, address)\n  return contract\n}\n\nexport const getAllowance = async (\n  lpContract: Contract,\n  masterChefContract: Contract,\n  account: string,\n): Promise<string> => {\n  try {\n    const allowance: string = await lpContract.methods.allowance(account, masterChefContract.options.address).call()\n    return allowance\n  } catch (e) {\n    return '0'\n  }\n}\n\nexport const getTokenBalance = async (\n  provider: ProviderType,\n  tokenAddress: string,\n  userAddress: string,\n): Promise<string> => {\n  const contract = getContract(provider, tokenAddress)\n  try {\n    const balance: string = await contract.methods.balanceOf(userAddress).call()\n    return balance\n  } catch (e) {\n    return '0'\n  }\n}\n"],"sourceRoot":""}